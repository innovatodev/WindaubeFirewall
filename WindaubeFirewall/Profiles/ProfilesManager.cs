using WindaubeFirewall.Settings;
using WindaubeFirewall.ProcessInfos;
using WindaubeFirewall.Connection;

namespace WindaubeFirewall.Profiles;

/// <summary>
/// Manages firewall profiles and their creation, matching and persistence
/// </summary>
public class ProfilesManager
{
    /// <summary>
    /// Ensures that required special system profiles exist in the profiles list
    /// </summary>
    public static void EnsureSpecialProfiles(List<SettingsProfiles> profiles)
    {
        // Define default special profiles
        var defaultProfiles = new List<SettingsProfiles>
        {
            new() {
                Id = Guid.Parse("00000000-0000-0000-0000-000000000001"),
                Name = "WindaubeFirewall",
                IsSpecial = true,
                IsAutoGenerated = true,
                Icon = ProcessInfo.ICON_WINDAUBEFIREWALL,
                Fingerprints =
                [
                    new() { Type = FingerprintType.FullPath, Operator = MatchOperator.Equals, Value = Environment.ProcessPath ?? $"{AppContext.BaseDirectory}\\WindaubeFirewall.exe" }
                ],
                NetworkAction = new NetworkActionSettings
                {
                    DefaultNetworkAction = 1,
                    ForceBlockInternet = false,
                    ForceBlockLAN = false,
                    ForceBlockLocalhost = false,
                    ForceBlockIncoming = false,
                    BlockBypassDNS = false,
                },
                Blocklists = new BlocklistsSettings
                {
                    OfflineBlocklists = [],
                    OnlineBlocklists  = []
                }
            },
            new() {
                Id = Guid.Parse("00000000-0000-0000-0000-000000000002"),
                Name = "SystemDNS",
                IsSpecial = true,
                IsAutoGenerated = true,
                Icon = ProcessInfo.ICON_DEFAULT_PROCESS,
                Fingerprints =
                [
                    new() { Type = FingerprintType.ProcessName, Operator = MatchOperator.Equals, Value = "SYSTEM" },
                    new() { Type = FingerprintType.ProcessName, Operator = MatchOperator.Equals, Value = "IDLE" }
                ],
                NetworkAction = new NetworkActionSettings
                {
                    DefaultNetworkAction = 0,
                    ForceBlockInternet = false,
                    ForceBlockLAN = false,
                    ForceBlockLocalhost = false,
                    ForceBlockIncoming = false,
                    IncomingRules =
                    [
                        "ALLOW Localhost",
                        "ALLOW LAN UDP/5353",
                        "ALLOW LAN UDP/5355",
                        "ALLOW MULTICAST UDP/5353",
                        "ALLOW MULTICAST UDP/5355",
                        "BLOCK *"
                    ],
                    OutgoingRules =
                    [
                        "ALLOW Localhost",
                        "ALLOW LAN UDP/5353",
                        "ALLOW LAN UDP/5355",
                        "ALLOW MULTICAST UDP/5353",
                        "ALLOW MULTICAST UDP/5355",
                        "ALLOW * UDP/53",
                        "ALLOW * TCP/443",
                        "ALLOW * TCP/853",
                        "BLOCK *"
                    ]
                },
                Blocklists = new BlocklistsSettings
                {
                    OfflineBlocklists = [],
                    OnlineBlocklists = []
                }
            },
            new() {
                Id = Guid.Parse("00000000-0000-0000-0000-000000000003"),
                Name = "SYSTEM",
                IsSpecial = true,
                IsAutoGenerated = true,
                Icon = ProcessInfo.ICON_DEFAULT_PROCESS,
                Fingerprints =
                [
                    new() { Type = FingerprintType.ProcessName, Operator = MatchOperator.Equals, Value = "SYSTEM" },
                    new() { Type = FingerprintType.ProcessName, Operator = MatchOperator.Equals, Value = "IDLE" }
                ],
                NetworkAction = new NetworkActionSettings
                {
                    DefaultNetworkAction = 0,
                    ForceBlockInternet = false,
                    ForceBlockLAN = false,
                    ForceBlockLocalhost = false,
                    ForceBlockIncoming = false,
                    IncomingRules =[],
                    OutgoingRules = []
                },
                Blocklists = new BlocklistsSettings
                {
                    OfflineBlocklists = App.SettingsApp.Blocklists.OfflineBlocklists
                        .Select(bl => new OfflineBlocklistEnabledState { Name = bl.Name }) // Removed IsEnabled
                        .ToList(),
                    OnlineBlocklists = App.SettingsApp.Blocklists.OnlineBlocklists
                        .Select(bl => new BlocklistEnabledState { Name = bl.Name }) // Removed IsEnabled
                        .ToList()
                }
            },
            new() {
                Id = Guid.Parse("00000000-0000-0000-0000-000000000004"),
                Name = "UNKNOWN",
                IsSpecial = true,
                IsAutoGenerated = true,
                Icon = ProcessInfo.ICON_UNKNOWN,
                Fingerprints =
                [
                    new() { Type = FingerprintType.ProcessName, Operator = MatchOperator.Equals, Value = "UNKNOWN" }
                ],
                NetworkAction = new NetworkActionSettings
                {
                    DefaultNetworkAction = 0,
                    ForceBlockInternet = false,
                    ForceBlockLAN = false,
                    ForceBlockLocalhost = false,
                    ForceBlockIncoming = false,
                    IncomingRules =[],
                    OutgoingRules = []
                },
                Blocklists = new BlocklistsSettings
                {
                    OfflineBlocklists = App.SettingsApp.Blocklists.OfflineBlocklists
                        .Select(bl => new OfflineBlocklistEnabledState { Name = bl.Name }) // Removed IsEnabled
                        .ToList(),
                    OnlineBlocklists = App.SettingsApp.Blocklists.OnlineBlocklists
                        .Select(bl => new BlocklistEnabledState { Name = bl.Name }) // Removed IsEnabled
                        .ToList()
                }
            }
        };

        foreach (var defaultProfile in defaultProfiles)
        {
            if (!profiles.Any(p => p.IsSpecial && p.Name == defaultProfile.Name))
            {
                profiles.Add(defaultProfile);
                Logger.Log($"ProfilesManager: Added special profile: {defaultProfile.Name}");
            }
        }
    }

    /// <summary>
    /// Creates a new default profile for a connection
    /// </summary>
    /// <param name="connection">The connection to create a profile for</param>
    /// <returns>A new SettingsProfiles object with default settings</returns>
    public static SettingsProfiles CreateDefaultProfile(ConnectionModel connection)
    {
        var icon = ProcessInfo.GetProcessIconBase64(connection.ProcessPath);

        // Determine the type of process and create appropriate fingerprint
        FingerPrint fingerprint;
        if (connection.ProcessName.StartsWith("SVC:"))
        {
            var serviceName = connection.ProcessName[4..];
            if (serviceName.Contains('_'))
            {
                serviceName = serviceName[..serviceName.LastIndexOf('_')];
                fingerprint = new FingerPrint
                {
                    Type = FingerprintType.WindowsService,
                    Operator = MatchOperator.StartsWith,
                    Value = serviceName
                };
            }
            else
            {
                fingerprint = new FingerPrint
                {
                    Type = FingerprintType.WindowsService,
                    Operator = MatchOperator.Equals,
                    Value = serviceName
                };
            }
        }
        else if (connection.ProcessName.StartsWith("WinStore:"))
        {
            var storeName = connection.ProcessName[9..];
            fingerprint = new FingerPrint
            {
                Type = FingerprintType.WindowsStore,
                Operator = MatchOperator.Equals,
                Value = storeName
            };
        }
        else
        {
            fingerprint = new FingerPrint
            {
                Type = FingerprintType.FullPath,
                Operator = MatchOperator.Equals,
                Value = ConvertToEnvVarPath(connection.ProcessPath)  // Convert to env vars if enabled
            };
        }

        var profiles = App.SettingsProfiles;
        var existingProfile = profiles.FirstOrDefault(p => p.Fingerprints.Any(f => f.Equals(fingerprint)));
        if (existingProfile != null)
        {
            return existingProfile;
        }

        return new SettingsProfiles
        {
            Id = Guid.NewGuid(),
            IsAutoGenerated = true,
            Name = connection.ProcessName.StartsWith("SVC:")
                ? $"SVC:{connection.ProcessName[4..]}"
                : connection.ProcessName,
            Fingerprints = [fingerprint],
            Icon = ProcessInfo.GetProcessIconBase64(connection.ProcessPath),
            NetworkAction = new NetworkActionSettings
            {
                IsSimpleMode = null,
                DefaultNetworkAction = null,
                ForceBlockInternet = null,
                ForceBlockLAN = null,
                ForceBlockLocalhost = null,
                ForceBlockIncoming = null,
                BlockBypassDNS = null,
                IncomingRules = new List<string>(),
                OutgoingRules = new List<string>()
            },
            Blocklists = new BlocklistsSettings
            {
                OfflineBlocklists = App.SettingsApp.Blocklists.OfflineBlocklists
                    .Select(bl => new OfflineBlocklistEnabledState { Name = bl.Name }) // Removed IsEnabled
                    .ToList(),
                OnlineBlocklists = App.SettingsApp.Blocklists.OnlineBlocklists
                    .Select(bl => new BlocklistEnabledState { Name = bl.Name }) // Removed IsEnabled
                    .ToList()
            }
        };
    }

    public static SettingsProfiles CreateDefaultProfileProcessInfo(string processName, string processPath, string processCommandLine)
    {
        var icon = ProcessInfo.GetProcessIconBase64(processPath);

        // Determine the type of process and create appropriate fingerprint
        FingerPrint fingerprint;
        if (processName.StartsWith("SVC:"))
        {
            var serviceName = processName[4..];
            if (serviceName.Contains('_'))
            {
                serviceName = serviceName[..serviceName.LastIndexOf('_')];
                fingerprint = new FingerPrint
                {
                    Type = FingerprintType.WindowsService,
                    Operator = MatchOperator.StartsWith,
                    Value = serviceName
                };
            }
            else
            {
                fingerprint = new FingerPrint
                {
                    Type = FingerprintType.WindowsService,
                    Operator = MatchOperator.Equals,
                    Value = serviceName
                };
            }
        }
        else if (processName.StartsWith("WinStore:"))
        {
            var storeName = processName[9..];
            fingerprint = new FingerPrint
            {
                Type = FingerprintType.WindowsStore,
                Operator = MatchOperator.Equals,
                Value = storeName
            };
        }
        else
        {
            fingerprint = new FingerPrint
            {
                Type = FingerprintType.FullPath,
                Operator = MatchOperator.Equals,
                Value = ConvertToEnvVarPath(processPath)  // Convert to env vars if enabled
            };
        }

        var profiles = App.SettingsProfiles;
        var existingProfile = profiles.FirstOrDefault(p => p.Fingerprints.Any(f => f.Equals(fingerprint)));
        if (existingProfile != null)
        {
            return existingProfile;
        }

        return new SettingsProfiles
        {
            Id = Guid.NewGuid(),
            IsAutoGenerated = true,
            Name = processName.StartsWith("SVC:")
                ? $"SVC:{processName[4..]}"
                : processName,
            Fingerprints = [fingerprint],
            Icon = ProcessInfo.GetProcessIconBase64(processPath),
            NetworkAction = new NetworkActionSettings
            {
                IsSimpleMode = null,
                DefaultNetworkAction = null,
                ForceBlockInternet = null,
                ForceBlockLAN = null,
                ForceBlockLocalhost = null,
                ForceBlockIncoming = null,
                BlockBypassDNS = null,
                IncomingRules = new List<string>(),
                OutgoingRules = new List<string>()
            },
            Blocklists = new BlocklistsSettings
            {
                OfflineBlocklists = App.SettingsApp.Blocklists.OfflineBlocklists
                    .Select(bl => new OfflineBlocklistEnabledState { Name = bl.Name }) // Removed IsEnabled
                    .ToList(),
                OnlineBlocklists = App.SettingsApp.Blocklists.OnlineBlocklists
                    .Select(bl => new BlocklistEnabledState { Name = bl.Name }) // Removed IsEnabled
                    .ToList()
            }
        };
    }

    public static void AddProfile(SettingsProfiles profile)
    {
        var profiles = SettingsManager.LoadSettingsProfiles();

        if (!profiles.Any(p => p.Id == profile.Id))
        {
            profiles.Add(profile);
            App.SettingsProfiles = profiles;
            SettingsManager.SaveSettingsProfiles(profiles);
            Logger.Log($"ProfilesManager: Added profile: {profile.Name}");
        }
        else
        {
            Logger.Log($"ProfilesManager: Profile with ID {profile.Id} already exists.");
        }
    }

    /// <summary>
    /// Matches a connection to an existing profile based on fingerprints
    /// </summary>
    /// <param name="connection">The connection to find a profile for</param>
    /// <returns>The matching profile or null if no match found</returns>
    public static SettingsProfiles? MatchConnection(ConnectionModel connection)
    {
        var profiles = App.SettingsProfiles;

        // Check for special profiles first
        if (connection.ProcessName == "SYSTEM" || connection.ProcessName == "IDLE")
        {
            return profiles.First(p => p.IsSpecial && p.Name == "SYSTEM");
        }
        if (connection.ProcessName == "UNKNOWN")
        {
            return profiles.First(p => p.IsSpecial && p.Name == "UNKNOWN");
        }

        // Ensure existing profiles are matched correctly
        var matchedProfile = profiles.FirstOrDefault(p => MatchesProfile(p, connection));
        if (matchedProfile != null)
        {
            return matchedProfile;
        }

        // First try to match non-auto-generated profiles
        var match = profiles
            .Where(p => !p.IsAutoGenerated)
            .FirstOrDefault(p => p.Fingerprints.Any(f => MatchesFingerprint(f, connection)));

        // If no match found, try auto-generated profiles
        match ??= profiles
                .Where(p => p.IsAutoGenerated)
                .FirstOrDefault(p => p.Fingerprints.Any(f => MatchesFingerprint(f, connection)));

        return match;
    }

    private static bool MatchesFingerprint(FingerPrint fingerprint, ConnectionModel connection)
    {
        // Always expand env vars when matching regardless of setting
        var patternValue = fingerprint.Type switch
        {
            FingerprintType.FullPath or FingerprintType.CommandLine =>
                Environment.ExpandEnvironmentVariables(fingerprint.Value),
            _ => fingerprint.Value
        };

        var valueToMatch = fingerprint.Type switch
        {
            FingerprintType.ProcessName => connection.ProcessName,
            FingerprintType.FullPath => connection.ProcessPath,
            FingerprintType.CommandLine => connection.ProcessCommandLine,
            FingerprintType.WindowsService => connection.ProcessName.StartsWith("SVC:") ?
                connection.ProcessName[4..] : "",
            FingerprintType.WindowsStore => connection.ProcessName.StartsWith("WinStore:") ?
                connection.ProcessName[9..] : "",
            _ => ""
        };

        return MatchValue(fingerprint.Operator, valueToMatch, patternValue);
    }

    private static bool MatchValue(MatchOperator op, string value, string pattern)
    {
        return op switch
        {
            MatchOperator.Equals => value.Equals(pattern, StringComparison.OrdinalIgnoreCase),
            MatchOperator.StartsWith => value.StartsWith(pattern, StringComparison.OrdinalIgnoreCase),
            MatchOperator.Contains => value.Contains(pattern, StringComparison.OrdinalIgnoreCase),
            _ => false
        };
    }

    private static string ConvertToEnvVarPath(string path)
    {
        if (!App.SettingsApp.Application.ProfileGenerateWithEnvVars)
            return path;

        // Order by length descending to replace longest paths first
        var envVars = new Dictionary<string, string>
        {
            { Environment.GetFolderPath(Environment.SpecialFolder.Windows), "%SystemRoot%" },
            { Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), "%ProgramFiles%" },
            { Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86), "%ProgramFiles(x86)%" },
            { Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "%USERPROFILE%" },
            { Environment.GetFolderPath(Environment.SpecialFolder.CommonPrograms), "%ProgramData%" }
        }.OrderByDescending(x => x.Key.Length);

        var result = path;
        foreach (var envVar in envVars)
        {
            if (result.StartsWith(envVar.Key, StringComparison.OrdinalIgnoreCase))
            {
                result = result.Replace(envVar.Key, envVar.Value, StringComparison.OrdinalIgnoreCase);
            }
        }
        return result;
    }

    private static string ExpandEnvVarPath(string path)
    {
        return Environment.ExpandEnvironmentVariables(path);
    }

    public static SettingsProfiles? MatchProcessInfo(string processName, string processPath, string processCommandLine)
    {
        var profiles = App.SettingsProfiles;

        // Check for special profiles first
        if (processName == "SYSTEM" || processName == "IDLE")
        {
            return profiles.First(p => p.IsSpecial && p.Name == "SYSTEM");
        }
        if (processName == "UNKNOWN")
        {
            return profiles.First(p => p.IsSpecial && p.Name == "UNKNOWN");
        }

        // Ensure existing profiles are matched correctly
        var matchedProfile = profiles.FirstOrDefault(p => MatchesProfile(p, processName, processPath, processCommandLine));
        if (matchedProfile != null)
        {
            return matchedProfile;
        }

        // First try to match non-auto-generated profiles
        var match = profiles
            .Where(p => !p.IsAutoGenerated)
            .FirstOrDefault(p => p.Fingerprints.Any(f => MatchesFingerprintProcessInfo(f, processName, processPath, processCommandLine)));

        // If no match found, try auto-generated profiles
        match ??= profiles
                .Where(p => p.IsAutoGenerated)
                .FirstOrDefault(p => p.Fingerprints.Any(f => MatchesFingerprintProcessInfo(f, processName, processPath, processCommandLine)));

        return match;
    }

    private static bool MatchesFingerprintProcessInfo(FingerPrint fingerprint, string processName, string processPath, string processCommandLine)
    {
        return fingerprint.Type switch
        {
            FingerprintType.ProcessName => MatchValue(fingerprint.Operator, processName, fingerprint.Value),
            FingerprintType.FullPath => MatchValue(fingerprint.Operator, processPath, fingerprint.Value),
            FingerprintType.CommandLine => MatchValue(fingerprint.Operator, processCommandLine, fingerprint.Value),
            FingerprintType.WindowsService => MatchValue(fingerprint.Operator,
                processName.StartsWith("SVC:") ? processName[4..] : "", fingerprint.Value),
            FingerprintType.WindowsStore => MatchValue(fingerprint.Operator,
                processName.StartsWith("WinStore:") ? processName[9..] : "", fingerprint.Value),
            _ => false
        };
    }

    // Add helper methods for profile matching
    private static bool MatchesProfile(SettingsProfiles profile, ConnectionModel connection)
    {
        // Implement matching logic based on connection properties
        return profile.Name.Equals(connection.ProfileName, StringComparison.OrdinalIgnoreCase);
    }

    private static bool MatchesProfile(SettingsProfiles profile, string processName, string processPath, string processCommandLine)
    {
        // Implement matching logic based on process properties
        return profile.Name.Equals(processName, StringComparison.OrdinalIgnoreCase);
    }

    public static string? GetProfileIcon(Guid profileId)
    {
        var profile = App.SettingsProfiles.FirstOrDefault(p => p.Id == profileId);
        return profile?.Icon;
    }
}
